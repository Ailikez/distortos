{% set board = dictionary['/']['properties']['compatible'][0] %}
{% set gpioKeys = getNode(dictionary, path) %}
{% set includeGuard = outputFile | sanitize('[^0-9A-Za-z]') | upper + '_' %}
/**
 * \file
 * \brief Declaration of {{ sanitizedKeys }} for {{ board }}
 *
 * \author Copyright (C) 2014-{{ year }} Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
 *
 * \par License
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * \warning
 * Automatically generated file - do not edit!
 */

#ifndef {{ includeGuard }}
#define {{ includeGuard }}

#include <cstddef>

/// total number of {{ sanitizedKeys }} on the board
#define DISTORTOS_BOARD_TOTAL_{{ sanitizedKeys | upper }}		(
{%- for node in gpioKeys['nodes'].values() if node['properties']['status'][0] == 'okay' -%}
1{%if loop.last == False %} + {% endif %}
{%- endfor -%}
)

namespace distortos
{

namespace chip
{

class ChipInputPin;

}	// namespace chip

namespace board
{

/// total number of {{ sanitizedKeys }} on the board
constexpr size_t total{{ sanitizedKeys | capitalize }} {DISTORTOS_BOARD_TOTAL_{{ sanitizedKeys | upper }}};

/*---------------------------------------------------------------------------------------------------------------------+
| indexes of {{ sanitizedKeys }}
+---------------------------------------------------------------------------------------------------------------------*/

enum
{
{% for name, node in gpioKeys['nodes'].items() if node['properties']['status'][0] == 'okay' %}
		/// index of {{ name }} button ({{ node['properties']['label'][0] }})
		{{ name | sanitize('[^0-9A-Za-z]') }}ButtonIndex,
{% endfor %}
};

/*---------------------------------------------------------------------------------------------------------------------+
| alternative (label-based) indexes of {{ sanitizedKeys }}
+---------------------------------------------------------------------------------------------------------------------*/

{% for name, node in gpioKeys['nodes'].items() if node['properties']['status'][0] == 'okay' %}
{% set label = node['properties']['label'][0] %}
/// alternative index of {{ name }} button ({{ label }})
constexpr size_t {{ label | sanitize('[^0-9A-Za-z]') }}ButtonIndex {# remove whitespace -#}
{{ '{' }}{{ name | sanitize('[^0-9A-Za-z]') }}ButtonIndex};

{% endfor %}
/*---------------------------------------------------------------------------------------------------------------------+
| indexed access to {{ sanitizedKeys }} objects
+---------------------------------------------------------------------------------------------------------------------*/

/// array with all {{ sanitizedKeys }} objects
extern const chip::ChipInputPin {{ sanitizedKeys }}[total{{ sanitizedKeys | capitalize }}];

}	// namespace board

}	// namespace distortos

#endif	// {{ includeGuard }}
