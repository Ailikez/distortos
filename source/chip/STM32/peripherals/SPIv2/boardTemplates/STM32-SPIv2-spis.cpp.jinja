/**
 * \file
 * \brief Definitions of low-level SPI master drivers for SPIv2 in {{ board }} ({{ dictionary['chip']['compatible'][0] }} chip)
 *
 * \author Copyright (C) 2016-2018 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
 *
 * \par License
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * \warning
 * Automatically generated file - do not edit!
 */

#include "distortos/chip/spis.hpp"

#include "distortos/chip/ChipSpiMasterLowLevel.hpp"
#include "distortos/chip/CMSIS-proxy.h"

#include "distortos/BIND_LOW_LEVEL_INITIALIZER.h"

namespace distortos
{

namespace chip
{
{% for key, spi in dictionary['SPIs'].items() if spi is mapping and 'ST,STM32-SPI-v2' in spi['compatible'] %}

#ifdef CONFIG_CHIP_STM32_SPIV2_{{ key | upper }}_ENABLE

/*---------------------------------------------------------------------------------------------------------------------+
| {{ key | upper }}
+---------------------------------------------------------------------------------------------------------------------*/

namespace
{

/**
 * \brief Low-level chip initializer for {{ key | upper }}
 *
 * This function is called before constructors for global and static objects via BIND_LOW_LEVEL_INITIALIZER().
 */

void {{ key | lower }}LowLevelInitializer()
{
#if defined(RCC_APB1ENR_{{ key | upper }}EN)
	RCC->APB1ENR |= RCC_APB1ENR_{{ key | upper }}EN;
#elif defined(RCC_APB1ENR1_{{ key | upper }}EN)
	RCC->APB1ENR1 |= RCC_APB1ENR1_{{ key | upper }}EN;
#elif defined(RCC_APB2ENR_{{ key | upper }}EN)
	RCC->APB2ENR |= RCC_APB2ENR_{{ key | upper }}EN;
#else
	#error "Unsupported bus for {{ key | upper }}!"
#endif
}

BIND_LOW_LEVEL_INITIALIZER(50, {{ key | lower }}LowLevelInitializer);

}	// namespace

ChipSpiMasterLowLevel {{ key | lower }} {ChipSpiMasterLowLevel::{{ key | lower }}Parameters};

/**
 * \brief {{ spi['interrupt']['vector'] }} interrupt handler
 */

extern "C" void {{ spi['interrupt']['vector'] }}_IRQHandler()
{
	{{ key | lower }}.interruptHandler();
}

#endif	// def CONFIG_CHIP_STM32_SPIV2_{{ key | upper }}_ENABLE
{% endfor %}

}	// namespace chip

}	// namespace distortos
