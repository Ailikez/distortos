{% set prefix = ('BOARD_' + outputPath + '_' + board) | sanitize('[^0-9A-Za-z]') | upper %}
#
# file: {{ metadata[metadataIndex][2] }}
#
# author: Copyright (C) 2014-{{ year }} Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
# distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Automatically generated file - do not edit!
#

if {{ prefix }}

comment "{{ board }} linker script options"

config LDSCRIPT
	string
	default "{{ outputPath }}/{{ sanitizedBoard }}.ld"
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-flash' in memory['compatible'] and '.text' in memory.get('sections', ['.text']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".text memory region"
	help
		Select memory region for .text section in linker script
{% endif %}

config {{ prefix }}_LD_TEXT_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for .text section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-flash' in memory['compatible'] and '.ARM.exidx' in memory.get('sections', ['.ARM.exidx']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".ARM.exidx memory region"
	help
		Select memory region for .ARM.exidx section in linker script
{% endif %}

config {{ prefix }}_LD_ARM_EXIDX_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for .ARM.exidx section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.main_stack' in memory.get('sections', ['.main_stack']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt "Main stack memory region"
	help
		Select memory region for main stack in linker script
{% endif %}

config {{ prefix }}_LD_MAIN_STACK_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for main stack
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.bss' in memory.get('sections', ['.bss']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".bss memory region"
	help
		Select memory region for .bss section in linker script
{% endif %}

config {{ prefix }}_LD_BSS_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for .bss section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.data' in memory.get('sections', ['.data']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".data VMA memory region"
	help
		Select VMA memory region for .data section in linker script
{% endif %}

config {{ prefix }}_LD_DATA_VMA_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as VMA memory region for .data section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-flash' in memory['compatible'] and '.data' in memory.get('sections', ['.data']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".data LMA memory region"
	help
		Select LMA memory region for .data section in linker script
{% endif %}

config {{ prefix }}_LD_DATA_LMA_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as LMA memory region for .data section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.noinit' in memory.get('sections', ['.noinit']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".noinit memory region"
	help
		Select memory region for .noinit section in linker script
{% endif %}

config {{ prefix }}_LD_NOINIT_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for .noinit section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for ramKey, ramMemory in dictionary['memories'].items() if ramMemory is mapping and
		'on-chip-RAM' in ramMemory['compatible'] and
		'.{}.data'.format(ramKey) in ramMemory.get('sections', ['.{}.data'.format(ramKey)]) %}
{% for romKey, romMemory in dictionary['memories'].items() if romMemory is mapping and
		'on-chip-flash' in romMemory['compatible'] and
		'.{}.data'.format(ramKey) in ramMemory.get('sections', ['.{}.data'.format(ramKey)]) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt ".{{ ramKey }}.data LMA memory region"
	help
		Select LMA memory region for .{{ ramKey }}.data section in linker script
{% endif %}

config {{ prefix }}_LD_{{ ramKey | upper }}_DATA_LMA_REGION_{{ romKey | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ romKey }}"
	help
		Use {{ romKey }} as LMA memory region for .{{ ramKey }}.data section
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.process_stack' in memory.get('sections', ['.process_stack']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt "Process stack memory region"
	help
		Select memory region for process stack in linker script
{% endif %}

config {{ prefix }}_LD_PROCESS_STACK_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for process stack
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}
{% for key, memory in dictionary['memories'].items() if memory is mapping and
		'on-chip-RAM' in memory['compatible'] and '.heap' in memory.get('sections', ['.heap']) %}
{% if loop.first == True and loop.last == False %}

choice
	prompt "Heap memory region"
	help
		Select memory region for heap in linker script
{% endif %}

config {{ prefix }}_LD_HEAP_REGION_{{ key | upper }}
{% if loop.first == loop.last == True %}
	bool
	default y
{% else %}
	bool "{{ key }}"
	help
		Use {{ key }} as memory region for heap
{% endif %}
{% if loop.last == True and loop.first == False %}

endchoice
{% endif %}
{% endfor %}

endif	# {{ prefix }}
